@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model InwardPolicy.Models.FirePolicyRiskModel

<div class="row justify-content-center mb-2">
    <h1>ADD RISK</h1>
    <div class="col">
        <form method="post">
            <div class="container h-auto p-4 border bg-light rounded shadow mt-2">
                <div class="mb-3">
                    <button type="button" onClick="BackBtnClick()" class="btn btn-secondary text-light">
                        <i class="bi bi-arrow-left-circle"></i> Back
                    </button>
                </div>
                <div class="text-end">
                    <button class="btn btn-primary text-light">
                        <i class="bi bi-plus-circle"></i> Add New
                    </button>
                </div>


                <div class="row mb-3">
                    @Html.HiddenFor(m => m.Mode, new { @id = "hfMode" })
                    @*<label>@Model.Mode</label>*@
                    <!-- RISK_CLASS -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskClass, "Risk Class", new { @class = "form-label" })
                        <span class="text-danger required-asterisk">*</span>
                        @Html.DropDownListFor(
                                m => m.FirePolicyRisk.RiskClass,
                                new SelectList(Model.RiskClass, "Value", "Text"),
                                new { @id = "ddlRiskClass", @requred = "required", @onchange = "OnRiskChange()", @class = "form-select form-control" }
                            )

                    </div>

                    <!-- RISK_DESC -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskDesc, "Risk Description", new { @class = "form-label" })
                        <span class="text-danger required-asterisk">*</span>
                        @Html.TextBoxFor(m => m.FirePolicyRisk.RiskDesc, new { @class = "form-control", @maxlength = "120" })
                    </div>

                    <!-- RISK_SICurr -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskSICurr, "Risk SI Currency", new { @class = "form-label" })
                        <span class="text-danger required-asterisk">*</span>
                        @Html.DropDownListFor(
                            m => m.FirePolicyRisk.RiskSICurr,
                            new SelectList(Model.RiskCurrency, "Value", "Text"),
                            new { @id = "ddlRiskSICurr", @class = "form-control", @disabled = "disabled" }
                        )

                    </div>
                </div>

                <div class="row mb-3">
                    <!-- RISK_FC_SI -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskFcSi, "Risk FC Sum Insured", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.FirePolicyRisk.RiskFcSi, new { @id = "RiskFcSi", @class = "form-control text-end", @maxlength = "9", @onchange = "GetLC();", @onkeypress = "return isNumberKey(event);", @oninput = "limitDigits(this);" })

                    </div>

                    <!-- RISK_LC_SI -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskLcSi, "Risk LC Sum Insured", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.FirePolicyRisk.RiskLcSi, new { @id = "RiskLcSi", @class = "form-control text-end", @onkeypress = "return isNumberKey(event);", @oninput = "limitDigits(this);" })
                    </div>

                    <!-- RISK_PREM_CURRENCY -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskPremCurr, "Risk Premium Currency", new { @class = "form-label" })
                        @Html.DropDownListFor(
                            m => m.FirePolicyRisk.RiskPremCurr,
                            new SelectList(Model.RiskCurrency, "Value", "Text"),
                            new { @id = "ddlRiskPremCurrency", @class = "form-control", @disabled = "disabled" }
                        )
                    </div>
                </div>

                <div class="row mb-3">
                    <!-- RISK_PREM_RATE -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskPremRate, "Risk Premium Rate", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.FirePolicyRisk.RiskPremRate, new { @id = "txtPremiumRate", @class = "form-control text-end", @onchange = "GetLC();", @onkeypress = "return isNumberKey(event);", @oninput = "limitDigits(this);" })
                    </div>

                    <!-- RISK_FC_PREM -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskFcPrem, "Risk FC Premium", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.FirePolicyRisk.RiskFcPrem, new { @id = "RiskFcPrem", @class = "form-control text-end", @onkeypress = "return isNumberKey(event);", @oninput = "limitDigits(this);" })
                    </div>

                    <!-- RISK_LC_PREM -->
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.FirePolicyRisk.RiskLcPrem, "Risk LC Premium", new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.FirePolicyRisk.RiskLcPrem, new { @id = "RiskLcPrem", @class = "form-control text-end", @onchange = "GetPremFc();", @onkeypress = "return isNumberKey(event);", @oninput = "limitDigits(this);" })
                    </div>
                </div>

                <div class="mt-3 col-md-12">
                    <center>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </center>
                </div>
            </div>
        </form>

    </div>
</div>
@*@if (Model.Mode == "I") { 
    <script>
        $(document).ready(function () {
            $("#ddlRiskSICurr").prop("disabled", false);
            $("#ddlRiskPremCurrency").prop("disabled", false);

        });
    </script>
}*@
<script>
    function BackBtnClick() {
        console.log(poluid);
        window.location.href = '@Url.Action("FirePolicy", "FirePolicy", new { area = "Transaction" })' + '/' + poluid + '/' + apprStatus ;
    }
        function OnRiskChange(){
            var riskClass = $("#ddlRiskClass").val();
            console.log(riskClass);
            $.ajax({
                type: "GET",
                url:'@Url.Action("GetCmValue", "FirePolicyRisk")',
                data: { code: riskClass},
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response > 100) {
                        alert("Percentage cannot be greater than 100.")
                        $('#txtPremiumRate').val(0);
                        
                        return;
                    }

                    else {
                        $("#txtPremiumRate").val(response);
                        GetLC()
                    }
                },
                error: function (error) {
                    console.log("Error: " + error);
                }
            });
        }
        @*$("RiskFcSi").change(function () {
            $.ajax({
                type: "GET",
                url:'@Url.Action("CurrencyRate", "FirePolicyRisk")',
                data: { code: riskClass},
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    $("#RiskLcSi").val(response);
                },
                error: function (error) {
                    console.log("Error: " + error);
                }
            });
        });*@
        var path = window.location.pathname;
        var segments = path.split('/');
        var poluid = segments[4];
    var temp = segments[6];
    if (temp) {
        apprStatus = temp;
    } else {
        apprStatus = 'N';
    }
        function GetLC() {
            var riskfc = $('#RiskFcSi').val();
            var selectedValue = $('#ddlRiskClass').val();
            //var selectedValuePrem = $('#ddlRiskPremCurrency').val();
            var premrate = $('#txtPremiumRate').val();

            if (!riskfc || !selectedValue || !premrate) {
                return;
            }

            riskfc = parseFloat(riskfc);
            premrate = parseFloat(premrate);

            if (isNaN(riskfc) || isNaN(premrate)) {
                return;
            }

            $.ajax({
                type: "GET",
                url: '@Url.Action("FillAll", "FirePolicyRisk")',
                data: { poluid: poluid,},
                dataType: "json",
                success: function (response) {
                    console.log(response)
                    const siCurrRate = response[0];
                    const premCurrRate = response[1];
                    console.log("SI Rate:", siCurrRate);
                    console.log("Premium Rate:", premCurrRate);
                    var riskLc = siCurrRate * riskfc;
                    var roundedRiskLc = Math.round(riskLc * 100) / 100;  // Round to 2 decimal places
                    $("#RiskLcSi").val(roundedRiskLc);
                    console.log(premCurrRate);
                    var riskPremLc = premrate / 100 * riskLc;
                    var roundedRiskPremLc = Math.round(riskPremLc * 100) / 100;  // Round to 2 decimal places
                    $("#RiskLcPrem").val(roundedRiskPremLc);

                    var riskFcPrem = riskPremLc / premCurrRate;
                    var roundedRiskFcPrem = Math.round(riskFcPrem * 100) / 100;  // Round to 2 decimal places
                    $("#RiskFcPrem").val(roundedRiskFcPrem);


                },
                error: function (error) {
                    console.log("Error: " + error);
                }
            });
        }
</script>


