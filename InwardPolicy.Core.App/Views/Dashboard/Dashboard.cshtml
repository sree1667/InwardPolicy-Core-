@InwardPolicy.Models 

<div class="row">
    <!-- Total Policies -->
    <div class="col-sm-12 col-md-4 mb-3 mb-sm-0">
        <div class="card bg-light bg-opacity-50">
            <div class="card-body text-center">
                <h3 class="card-title">
                    Number of Policies<br />
                </h3>
                <h2>
                    <div class="counter text-dark" data-speed="1000">
                        @*<asp:Label runat="server" ID="lblNumberOfPolicies"></asp:Label>*@

                    </div>
                </h2>
            </div>
        </div>
    </div>

    <!-- Total Sum Insured -->
    <div class="col-sm-12 col-md-4 mb-3 mb-sm-0">
        <div class="card bg-light bg-opacity-50">
            <div class="card-body text-center">
                <h3 class="card-title">
                    Total Sum Insured<br />
                </h3>
                <h2>
                    <div class="counterSI text-dark" data-speed="1000">
                        @*<asp:Label runat="server" ID="lblTotalSi"></asp:Label>*@
                    </div>
                </h2>
            </div>
        </div>
    </div>

    <!-- Total Approved Policies -->
    <div class="col-sm-12 col-md-4 mb-3 mb-sm-0">
        <div class="card bg-light bg-opacity-50">
            <div class="card-body text-center">
                <h3 class="card-title">
                    Total Approved Policies<br />
                </h3>
                <h2>
                    <div class="counter text-dark" data-speed="1000">
                        @*<asp:Label runat="server" ID="lblTotalApproved"></asp:Label>*@
                    </div>
                </h2>
            </div>
        </div>
    </div>
</div>
<div class="rounded shadow mt-3 bg-light ">
    <canvas id="lineChart" width="400" height="200"></canvas>
</div>

<script>
        (() => {
            // Function to animate counters
            const counters = document.querySelectorAll('.counter');
            counters.forEach(item => {
                let targetValue = parseInt(item.textContent.trim()) || 0;
                let count = 0;
                let speed = item.dataset.speed || 1000;
                let step = targetValue / 100;

                function updateCounter() {
                    count += step;
                    if (count >= targetValue) {
                        item.textContent = targetValue; // Ensure the final value matches exactly
                        clearInterval(stop);
                    } else {
                        item.textContent = Math.floor(count);
                    }
                }

                const stop = setInterval(updateCounter, speed / 100);
            });
        })();

        (() => {
            // Function for handling sum insured counter (with decimal precision)
            const counters = document.querySelectorAll('.counterSI');
            counters.forEach(item => {
                let targetValue = parseFloat(item.textContent.trim()) || 0;
                let count = 0;
                let step = targetValue / 100;
                let speed = 10;

                function updateCounter() {
                    count += step;
                    if (count >= targetValue) {
                        item.textContent = targetValue.toFixed(2); // Ensures final value is formatted to 2 decimals
                        clearInterval(stop);
                    } else {
                        item.textContent = count.toFixed(2);
                    }
                }

                const stop = setInterval(updateCounter, speed);
            });
        })();


        // Helper function to get month names
        function getLast7Months() {
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',
                'August', 'September', 'October', 'November', 'December'];
            const today = new Date();
            const labels = [];
            for (let i = 6; i >= 0; i--) {
                const date = new Date(today.getFullYear(), today.getMonth() - i, 1);
                labels.push(months[date.getMonth()]);
            }

            return labels;
        }

        // Get dynamic labels for the last 7 months
        const labels = getLast7Months();
        //const mydata = [65, 59, 80, 81, 56, 55, 400]

        $.ajax({
            type: "POST",
            url: "../WebService/CurrencyRate.asmx/GetPolicyCount",
            //data: JSON.stringify({ value: selectedValue }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                //to data populate
                const mydata = response.d;
                console.log(mydata);
                const data = {
                    labels: labels,
                    datasets: [{
                        label: 'Policy Taken',
                        data: mydata,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                };

                const config = {
                    type: 'line',
                    data: data,
                };

                const ctx = document.getElementById('lineChart').getContext('2d');
                new Chart(ctx, config);
            },
            error: function (response) {
                console.log("Error: " + response);
            }
        });